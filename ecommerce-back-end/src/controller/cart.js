const Cart = require('../models/cart');


function runUpdate(condition, updateData) {
    return new Promise((resolve, reject) => {
 
     Cart.findOneAndUpdate(condition, updateData, { upsert: true })
       .then(result => resolve())
       .catch(err => reject(err))
     });
}
 
exports.addItemToCart = (req, res) => {

    // Understanding req.user.
    // During login or signup, a jwt token is generated by a combo of the user_id and role
    // To communicate with the cart database, the 'requireSignin' middleware is set (see /routes/cart.js)
    // and this 'requireSignin' is responsible for breaking that same token (which was saved in 
    // req.headers.authorization) into the user id and role and saving both in req.user

    Cart.findOne({ user: req.user._id })
        .exec((error, cart) => {
            if (error) return res.status(400).json({ error });

            if (cart) {
                // If cart with 
                let promiseArray = [];

                // console.log("Cart Items >>> ", req.body.cartItems)
                // [ { product: '5fcf1c9500b49073b48420cf', quantity: 2 } ]

                // Loop through the cart Items not from DB but from window.store (in actions file)
                req.body.cartItems.forEach((cartItem) => {
                    const product = cartItem.product;   // Fetch product on each loop (5fcf1c9...)

                    // console.log("cart.cartItems : ", cart.cartItems)
                    /*cart.cartItems :  [ 
                        { 
                            quantity: 1,
                            _id: 5ff1846e74744f701d2026d8,
                            product: 5fcf3195b08c972311b7fa07 
                        }... 
                    ]*/
                    
                    // On every cycle of the cartItems from website, check to see if it exists 
                    // in the total cart Item list (cart.cartItems) in DB    
                    const item = cart.cartItems.find(c => c.product == product);    

                    let condition, update;

                    // If cart already exists in DB, update the cart belonging to logged in user,
                    // as well as the specific record (i.e. key-value pair) in the cart Items DB
                    if (item) {
                        condition = { "user": req.user._id, "cartItems.product": product };
                        update = {
                            "$set": {
                                "cartItems.$": cartItem
                            }
                        }; 
                    // Otherwise (specific product does not belong in the total cartItems table),
                    // the cart table will still be updated -- with its cartItems key being updated
                    // -- and NOT a new record under 'cart' table created as you may initially think
                    } else {   
                        condition = { user: req.user._id };
                        update = {
                            "$push": {
                                "cartItems": cartItem
                            }
                        };
                    }
                    promiseArray.push(runUpdate(condition, update))
                });
                Promise.all(promiseArray)
                    .then(response => res.status(201).json({ response }))
                    .catch(error => res.status(400).json({error})
                )
            } else {
                // If cart does not exist then create w new cart
                const cart = new Cart({
                    user: req.user._id,
                    cartItems: req.body.cartItems
                });
                cart.save((error, cart) => {
                    if (error) return res.status(400).json({ error });
                    if (cart) {
                        return res.status(201).json({ cart });
                    }
                });
            } 
        }
    );
};


exports.getCartItems = (req, res) => {
    //const { user } = req.body.payload;
    //if (user) {
        Cart.findOne({ user: req.user._id })
        .populate('cartItems.product', '_id name price productPictures')
        .exec((error, cart) => {
            // console.log("cart.js/ cart.items >>> ", cart.cartItems)
            /* [ 
                { 
                    quantity: 1,
                    _id: 5ff1846e74744f701d2026d8,
                    product: {
                        _id: 5fcf3195b08c972311b7fa07,
                        name: 'Samsung Galaxy J2 Core (Blue, 16 GB)  (1 GB RAM)',
                        price: 6690,
                        productPictures: [Array]
                    }...
                }
            ]*/

            if (error) return res.status(400).json({ error });

            // Reshape data retrieval to hold all products' id, name, img, price and qty (in stock)
            if (cart) {
                let cartItems = {};
                cart.cartItems.forEach((item, index) => {
                    cartItems[item.product._id.toString()] = {
                        _id: item.product._id.toString(),
                        name: item.product.name,
                        img: item.product.productPictures[0].img,
                        price: item.product.price,
                        qty: item.quantity
                    }
                })
               /* { '5fcf3195b08c972311b7fa07':
                    { _id: '5fcf3195b08c972311b7fa07',
                        name: 'Samsung Galaxy J2 Core (Blue, 16 GB)  (1 GB RAM)',
                        img: 'JMAntNoTs-samsung-galaxy-j2-core.jpeg',
                        price: 6690,
                        qty: 1 
                    }... 
                }*/                
                res.status(200).json({ cartItems })
            }
        })
    //}
}
